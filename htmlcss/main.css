/* 1. 가상요소 ::before, ::after */
/* div::before {
    content: "123";
    color: red;
    font-size: 20px;
}

div::after {
    content: "46";
} */

/* 2. 속성 선택자 */
/* [disabled] {
    background-color: red;
}

[type="password"] {
    color: red;
} */

/* 3. 여러가지 속성(Properties)들 */
/* .container {

} */

/* container 클래스 후손 item 클래스만 가져오기 */
/* .container .item {   */
    /* width: 200px;    */
    /* 박스 모델 관련 속성 */
    /* height: 100px;   */
    /* 박스 모델 관련 속성 */
    /* background-color: tomato;
    margin-bottom: 20px;   */
    /* 외부여백 - 아래쪽만 설정) */
    /* padding: 20px;  */
    /* 내부여백을 추가함으로써 요소의 크기가 그만큼 커짐. 200, 100px보다 더 커지는 것.*/
    /* border: 4px dotted blue;  */
    /* solid: 실선, dashed: 파선, dotted: 점선 */
    /* box-sizing: border-box;  */
    /* 내가 지정한 박스의 크기를 유지한 채로 내부여백/border이 설정됨. */
/* } */

/* .container .item:nth-child(2) { */
    /* box-shadow: 10px 20px 30px rgba(0, 0, 0, .3);  */
    /* x축에서의 거리 y축에서의 거리 색상(불투명도 30%) */
/* } */

/* .container .item:nth-child(3) { */
    /* opacity: 0.5;  */
    /* 1: 완전 불투명, 0: 완전 투명(요소는 있지만 투명도만 조정된 것) 0.5: 반투명 */
/* } */

/* 4. 글꼴, 문자 */
/* .container .item { */
    /* color: yellowgreen; */
    /* border: 2px solid black; */
    /* line-height: 2; */
    /* line-height: 줄의 높이: 2 - 기본 글자 크기의 2배만큼 높이를 만들겠다 */
    /* font-size: 40px; */
    /* font-style: italic; */
    /* text-align: center; */
    /* 글자 가운데 정렬 */
/* } */

/* .container .item:nth-child(2) { */
    /* font-weight: bold; */
    /* text-decoration: underline; */
    /* 밑줄 */
/* } */

/* 5. 배경 */
/* .container .item { */
    /* width: 200px; */
    /* height: 100px; */
    /* background-color: orange; */
    /* margin: 10px; */
    /* background-image: url("https://heropy.blog/css/images/logo.png"); */
    /* 이미지를 배경으로 넣기 */
    /* background-size: 80px; */
    /* 이미지 배경 사이즈 조절 */
    /* background-repeat: no-repeat; */
    /* default: repeat => 이미지가 바둑판처럼 계속 반복됨. 반복 안 하려면 'no-repeat' */
    /* background-position: bottom left; */
    /* 왼쪽, 위쪽에서의 거리, 위|아래|좌|우 중 두 개의 키워드를 가져와서 위치를 잡을 수 있음. */
/* } */

/* 6. 배치: position 속성으로 배치의 기준이 되는 요소에 relative를 넣고 */
/* 배치할 요소들에 absolute를 넣는다. */
/* .container {
    width: 400px;
    height: 250px;
    margin: 50px;
    padding: 20px;
    background-color: orange;
    box-sizing: border-box;
    position: relative; */
    /* relative: relative가 있는 요소를 기준으로, 자식 요소들이 배치가 되는 것.*/
/* } */

/* .container .item {
    width: 100px;
    height: 100px;
    background-color: royalblue;
} */

/* .container .item:nth-child(1) {
    position: absolute; */
    /* 부모요소를 기준으로 배치함. */
    /* 즉, item의 부모인 container를 기준으로 배치하기 때문에 노란색 박스를 넘어가는 것. */
    /* left: 40px;
    bottom: 100px;
} */

/* .container .item:nth-child(2) {

} */

/* 7. 플렉스(정렬) */
/* *** display: flex 는 본인의 자식 요소에 영향을 미침!!! *** */
/* .container { */
    /* background-color: orange; */
    /* display: flex; */
    /* 수평으로 만들고 싶은 요소들의 부모 요소에 이 속성 추가 default: flex-start(왼쪽 정렬) */
    /* justify-content: center; */
    /* 가운데 정렬. flex-end: 오른쪽 정렬, flex-start: 원래 상태(왼쪽 정렬)로 돌아옴 */
/* } */

/* .container .item { */
    /* width: 100px; */
    /* height: 100px; */
    /* background-color: royalblue; */
    /* border: 2px solid black; */
    /* box-sizing: border-box; */
    /* text-align: center; */
    /* 이걸로는 수평 가운데 정렬밖에 안 됨. */
    /* display: flex; */
    /* 이는 본인의 자식 요소에만 영향을 미침. */
    /* 그렇기 때문에 item 요소 내의 텍스트 요소에 영향을 미침. */
    /* justify-content: center; */
    /* text-align과 동일하게 수평 가운데 정렬만 가능. */
    /* align-items: center; */
    /* 이를 함으로써 수직 가운데 정렬까지 가능. */
/* } */

/* 8. 전환, 변환 */
/* .container .item { */
    /* width: 100px; */
    /* height: 100px; */
    /* background-color: royalblue; */
    /* margin: 30px; */
    /* padding: 10px; */
    /* border-radius: 10px; */
    /* 사각형 모서리 부분이 둥글게 10px만큼 깎음. */
    /* transition: 1s; */
    /* 전환효과: 전 상태와 후 상태의 변화를 조금 더 부드럽게 보여주는 효과 */
    /* 전상태: 100px, 후상태: 200px */
/* } */

/* item의 첫 번째 요소에 마우스를 올렸을 때 */
/* .container .item:nth-child(1):hover {
    width: 200px;
    background-color: orange;
} */

/* .container .item:nth-child(2):hover { */
    /* transform: rotate(45deg) scale(1.5); */
    /* 변환효과, transform 속성에 한 번에 다 넣음 */
    /* rotate: 회전(deg: 각도) */
    /* scale: 크기 조절(배수를 통해 크기를 조절. default: 1. 1보다 작으면 크기가 줄어듦.) */
/* } */

/* .container .item:nth-child(3):hover {
    transform:  perspective(300px) rotateX(45deg); */
    /* X: x축을 기준으로 회전. 즉, 3차원으로 회전... */
    /* perspective: 원근법을 이용하여 보이게 함. */
/* } */